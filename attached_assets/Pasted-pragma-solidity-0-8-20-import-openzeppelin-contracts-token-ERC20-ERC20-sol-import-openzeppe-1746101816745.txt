pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract CHONK9K is ERC20, Ownable {
    uint256 private constant TOTAL_SUPPLY = 9_000_000_000 * 10**18; // 9B tokens
    uint256 public burnFee = 100; // 1%
    uint256 public devFee = 100;  // 1%
    uint256 private constant FEE_DENOMINATOR = 10000;

    uint256 public constant MAX_BURN_FEE = 500; // 5%
    uint256 public constant MAX_DEV_FEE = 500;  // 5%

    address public devWallet;

    event Burn(address indexed from, uint256 amount);
    event DevFee(address indexed from, address indexed dev, uint256 amount);
    event FeesUpdated(uint256 burnFee, uint256 devFee);
    event DevWalletUpdated(address indexed devWallet);

    constructor() ERC20("Chonk9k Token", "CHONK9K") {
        _mint(msg.sender, TOTAL_SUPPLY);
        devWallet = msg.sender; // Default to contract owner
    }

    function setFees(uint256 _burnFee, uint256 _devFee) external onlyOwner {
        require(_burnFee <= MAX_BURN_FEE, "Burn fee too high");
        require(_devFee <= MAX_DEV_FEE, "Dev fee too high");
        require(_burnFee + _devFee <= FEE_DENOMINATOR, "Total fees too high");
        burnFee = _burnFee;
        devFee = _devFee;
        emit FeesUpdated(_burnFee, _devFee);
    }

    function setDevWallet(address _devWallet) external onlyOwner {
        require(_devWallet != address(0), "Invalid address");
        devWallet = _devWallet;
        emit DevWalletUpdated(_devWallet);
    }

    function totalFee() public view returns (uint256) {
        return burnFee + devFee;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {
        require(sender != address(0), "Transfer from zero address");
        require(recipient != address(0), "Transfer to zero address");

        // Calculate fees
        uint256 totalFee = (amount * (burnFee + devFee)) / FEE_DENOMINATOR;
        uint256 burnAmount = (amount * burnFee) / FEE_DENOMINATOR;
        uint256 transferAmount = amount - totalFee;

        // Transfer tokens
        super._transfer(sender, address(0), burnAmount); // Burn
        emit Burn(sender, burnAmount);

        super._transfer(sender, devWallet, totalFee - burnAmount); // Dev fee
        emit DevFee(sender, devWallet, totalFee - burnAmount);

        super._transfer(sender, recipient, transferAmount);
    }
}